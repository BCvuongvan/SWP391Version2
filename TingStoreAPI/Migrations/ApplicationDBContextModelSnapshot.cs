// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TingStoreAPI.DB;

namespace TingStoreAPI.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TingStoreAPI.Models.Cart", b =>
                {
                    b.Property<string>("userName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("proId")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("userName", "proId");

                    b.HasIndex("proId");

                    b.ToTable("carts");
                });

            modelBuilder.Entity("TingStoreAPI.Models.Category", b =>
                {
                    b.Property<int>("cateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("cateDescribe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("cateStatus")
                        .HasColumnType("bit");

                    b.HasKey("cateId");

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            cateId = 1,
                            cateDescribe = "The best of phone",
                            cateName = "Iphone",
                            cateStatus = true
                        },
                        new
                        {
                            cateId = 2,
                            cateDescribe = "The best of phone",
                            cateName = "Samsung",
                            cateStatus = true
                        });
                });

            modelBuilder.Entity("TingStoreAPI.Models.DiscountPercent", b =>
                {
                    b.Property<int>("discountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("discountPercentage")
                        .HasColumnType("int");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<int?>("proId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.HasKey("discountId");

                    b.HasIndex("proId");

                    b.ToTable("discountPercents");
                });

            modelBuilder.Entity("TingStoreAPI.Models.Feedback", b =>
                {
                    b.Property<string>("userName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("proId")
                        .HasColumnType("int");

                    b.Property<string>("comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.HasKey("userName", "proId");

                    b.HasIndex("proId");

                    b.ToTable("feedbacks");
                });

            modelBuilder.Entity("TingStoreAPI.Models.Order", b =>
                {
                    b.Property<int>("orderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("orderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("orderStatusId")
                        .HasColumnType("int");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("orderId");

                    b.HasIndex("orderStatusId");

                    b.HasIndex("userName");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("TingStoreAPI.Models.OrderDetail", b =>
                {
                    b.Property<int>("orderId")
                        .HasColumnType("int");

                    b.Property<int>("proId")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("subTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("orderId", "proId");

                    b.HasIndex("proId");

                    b.ToTable("orderDetails");
                });

            modelBuilder.Entity("TingStoreAPI.Models.OrderStatus", b =>
                {
                    b.Property<int>("orderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("statusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("orderStatusId");

                    b.ToTable("orderStatuses");

                    b.HasData(
                        new
                        {
                            orderStatusId = 1,
                            statusName = "Spending"
                        },
                        new
                        {
                            orderStatusId = 2,
                            statusName = "Successful"
                        });
                });

            modelBuilder.Entity("TingStoreAPI.Models.Product", b =>
                {
                    b.Property<int>("proId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("cateId")
                        .HasColumnType("int");

                    b.Property<string>("proDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("proImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("proName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("proPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("proQuantity")
                        .HasColumnType("int");

                    b.Property<bool>("proStatus")
                        .HasColumnType("bit");

                    b.HasKey("proId");

                    b.HasIndex("cateId");

                    b.ToTable("products");
                });

            modelBuilder.Entity("TingStoreAPI.Models.ProductImage", b =>
                {
                    b.Property<int>("imageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("imageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("proId")
                        .HasColumnType("int");

                    b.HasKey("imageId");

                    b.HasIndex("proId");

                    b.ToTable("productImages");
                });

            modelBuilder.Entity("TingStoreAPI.Models.User", b =>
                {
                    b.Property<string>("userName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("userType")
                        .HasColumnType("int");

                    b.HasKey("userName");

                    b.ToTable("users");
                });

            modelBuilder.Entity("TingStoreAPI.Models.Cart", b =>
                {
                    b.HasOne("TingStoreAPI.Models.Product", "product")
                        .WithMany("carts")
                        .HasForeignKey("proId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TingStoreAPI.Models.User", "user")
                        .WithMany("carts")
                        .HasForeignKey("userName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("user");
                });

            modelBuilder.Entity("TingStoreAPI.Models.DiscountPercent", b =>
                {
                    b.HasOne("TingStoreAPI.Models.Product", "product")
                        .WithMany("discountPercents")
                        .HasForeignKey("proId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");
                });

            modelBuilder.Entity("TingStoreAPI.Models.Feedback", b =>
                {
                    b.HasOne("TingStoreAPI.Models.Product", "product")
                        .WithMany("feedbacks")
                        .HasForeignKey("proId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TingStoreAPI.Models.User", "user")
                        .WithMany("feedbacks")
                        .HasForeignKey("userName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("user");
                });

            modelBuilder.Entity("TingStoreAPI.Models.Order", b =>
                {
                    b.HasOne("TingStoreAPI.Models.OrderStatus", "orderStatus")
                        .WithMany("orders")
                        .HasForeignKey("orderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TingStoreAPI.Models.User", "user")
                        .WithMany("orders")
                        .HasForeignKey("userName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("orderStatus");

                    b.Navigation("user");
                });

            modelBuilder.Entity("TingStoreAPI.Models.OrderDetail", b =>
                {
                    b.HasOne("TingStoreAPI.Models.Order", "order")
                        .WithMany("orderDetails")
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TingStoreAPI.Models.Product", "product")
                        .WithMany("orderDetails")
                        .HasForeignKey("proId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("order");

                    b.Navigation("product");
                });

            modelBuilder.Entity("TingStoreAPI.Models.Product", b =>
                {
                    b.HasOne("TingStoreAPI.Models.Category", "category")
                        .WithMany()
                        .HasForeignKey("cateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("TingStoreAPI.Models.ProductImage", b =>
                {
                    b.HasOne("TingStoreAPI.Models.Product", "product")
                        .WithMany("productImages")
                        .HasForeignKey("proId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");
                });

            modelBuilder.Entity("TingStoreAPI.Models.Order", b =>
                {
                    b.Navigation("orderDetails");
                });

            modelBuilder.Entity("TingStoreAPI.Models.OrderStatus", b =>
                {
                    b.Navigation("orders");
                });

            modelBuilder.Entity("TingStoreAPI.Models.Product", b =>
                {
                    b.Navigation("carts");

                    b.Navigation("discountPercents");

                    b.Navigation("feedbacks");

                    b.Navigation("orderDetails");

                    b.Navigation("productImages");
                });

            modelBuilder.Entity("TingStoreAPI.Models.User", b =>
                {
                    b.Navigation("carts");

                    b.Navigation("feedbacks");

                    b.Navigation("orders");
                });
#pragma warning restore 612, 618
        }
    }
}
